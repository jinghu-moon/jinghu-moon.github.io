<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo + Github 搭建博客 2 — 初步搭建</title>
    <link href="/posts/4b3e013f/"/>
    <url>/posts/4b3e013f/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Github 搭建博客 1 — 预备知识</title>
    <link href="/posts/2335de7c/"/>
    <url>/posts/2335de7c/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信通知 API 实现 Twikoo 新消息提醒</title>
    <link href="/posts/d215bd76/"/>
    <url>/posts/d215bd76/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-注册企业微信"><a href="#1-1-注册企业微信" class="headerlink" title="1.1 注册企业微信"></a>1.1 注册企业微信</h2><p><a href="https://work.weixin.qq.com/">企业微信 (qq.com)</a> ，如下。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/01-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%B3%A8%E5%86%8C.png" alt="01-企业微信注册"></p><h2 id="1-2-创建应用"><a href="#1-2-创建应用" class="headerlink" title="1.2 创建应用"></a>1.2 创建应用</h2><p>注册成功后，点「管理企业」进入管理界面，选择「应用管理」 → 「自建」 → 「创建应用」。创建完成后进入应用详情页，得到 <code>agentid</code> 、<code>secret</code> ，保存下来。 <code>Secret</code> 在手机企业微信中查看。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/02-%E5%BA%94%E7%94%A8%E8%AF%A6%E6%83%85.png" alt="02-应用详情"></p><p>手机端消息页面，查看 Secret。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/03-secret.png" alt="03-secret"></p><p>网页端「我的企业」底部，保存 <code>企业ID</code> 。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/04-%E4%BC%81%E4%B8%9AID.png" alt="04-企业ID"></p><h2 id="1-3-创建-API-云函数"><a href="#1-3-创建-API-云函数" class="headerlink" title="1.3 创建 API 云函数"></a>1.3 创建 API 云函数</h2><p>首先到 <a href="https://console.cloud.tencent.com/tcb/env/">云开发 CloudBase - 腾讯云</a> 创建一个环境，不会创建环境的朋友请看 <a href="https://www.bilibili.com/video/BV1MZ4y1G7VB">Twikoo 腾讯云云开发部署视频教程 - bilibili</a> 。当然也可以使用 Twikoo 的云开发环境。</p><p>创建一个云函数，可取名为 <code>weixin-push</code> 。选择 helloworld 空白模板函数，Python3.6 环境， 128MB 运行内存，点击下一步，创建云函数。粘贴下面的代码，点击创建。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/05-%E4%BA%91%E5%87%BD%E6%95%B0.png" alt="05-云函数"></p><p>进入云函数，函数代码界面，建一个以 <code>.py</code> 为后缀的文件，文件名任意。粘贴下面的代码，保存。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf8 -*-</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> json<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTocken</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,secert,msg,agentId</span>):</span>    url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&quot;</span> + <span class="hljs-built_in">id</span> + <span class="hljs-string">&quot;&amp;corpsecret=&quot;</span> + secert    r =requests.get(url)    tocken_json = json.loads(r.text)    <span class="hljs-comment"># print(tocken_json[&#x27;access_token&#x27;])</span>    sendText(tocken=tocken_json[<span class="hljs-string">&#x27;access_token&#x27;</span>],agentId=agentId,msg=msg)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sendText</span>(<span class="hljs-params">tocken,agentId,msg</span>):</span>    sendUrl = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&quot;</span> + tocken    <span class="hljs-comment"># print(sendUrl)</span>    data = json.dumps(&#123;        <span class="hljs-string">&quot;safe&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-string">&quot;touser&quot;</span> : <span class="hljs-string">&quot;@all&quot;</span>,        <span class="hljs-string">&quot;msgtype&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,        <span class="hljs-string">&quot;agentid&quot;</span> : agentId,        <span class="hljs-string">&quot;text&quot;</span> : &#123;            <span class="hljs-string">&quot;content&quot;</span> : msg        &#125;    &#125;)    requests.post(sendUrl,data)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">event, context</span>):</span>    <span class="hljs-keyword">try</span>:        apiid=event[<span class="hljs-string">&#x27;queryStringParameters&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]        apisecert=event[<span class="hljs-string">&#x27;queryStringParameters&#x27;</span>][<span class="hljs-string">&#x27;secert&#x27;</span>]        apiagentId = event[<span class="hljs-string">&#x27;queryStringParameters&#x27;</span>][<span class="hljs-string">&#x27;agentId&#x27;</span>]        apimsg = event[<span class="hljs-string">&#x27;queryStringParameters&#x27;</span>][<span class="hljs-string">&#x27;msg&#x27;</span>]    <span class="hljs-keyword">except</span>:        apimsg = <span class="hljs-string">&#x27;有必填参数没有填写，请检查是否填写正确和格式是否错误。详情可以参阅：https://blog.zhheo.com/p/1e9f35bc.html&#x27;</span>        status = <span class="hljs-number">1</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># 执行主程序</span>            getTocken(<span class="hljs-built_in">id</span>=apiid,secert=apisecert,msg=apimsg,agentId=apiagentId)        <span class="hljs-keyword">except</span>:            status = <span class="hljs-number">1</span>            apimsg = <span class="hljs-string">&#x27;主程序运行时出现错误，请检查参数是否填写正确。详情可以参阅：https://blog.zhheo.com/p/1e9f35bc.html&#x27;</span>        <span class="hljs-keyword">else</span>:            status = <span class="hljs-number">0</span>    <span class="hljs-comment"># print(event)</span>    <span class="hljs-comment"># print(&quot;Received event: &quot; + json.dumps(event, indent = 2)) </span>    <span class="hljs-comment"># print(&quot;Received context: &quot; + str(context))</span>    <span class="hljs-comment"># print(&quot;Hello world&quot;)</span>    status_str = json.dumps(&#123;            <span class="hljs-string">&quot;status&quot;</span>:status,            <span class="hljs-string">&quot;msg&quot;</span>:apimsg        &#125;)    <span class="hljs-keyword">return</span>(status_str)</code></pre></div><h2 id="1-4-配置访问服务"><a href="#1-4-配置访问服务" class="headerlink" title="1.4 配置访问服务"></a>1.4 配置访问服务</h2><p>如果是第一次创建，参考 Twikoo 教程配置安全域名。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/06-%E6%96%B0%E5%BB%BA%E8%A7%A6%E5%8F%91%E8%B7%AF%E5%BE%84.png" alt="06-新建触发路径"></p><p>至此，云函数创建完成。</p><h2 id="1-5-测试服务"><a href="#1-5-测试服务" class="headerlink" title="1.5 测试服务"></a>1.5 测试服务</h2><p>使用以下方式，拼接成一个 <strong>URL</strong>，浏览器访问，看看手机微信 / 企业微信是否收到消息。</p><p><strong>云函数的访问服务 URL + 触发路径 + ?id = 企业微信 ID + secert = 应用 secert + Id = 应用 AgentId + &amp;msg =</strong></p><p>空格和加号仅为显示清楚，URL 中没有空格、加号</p><p>访问服务 URL：在「访问服务」界面，点击 <code>weixin-push</code> 。进入新页面后，地址栏里的网址。</p><p><strong>URL 示例</strong>：</p><p><a href="https://twikoo-xxxxxxxxxx-1305947611.ap-shanghai.app.tcloudbase.com/weixin-push?id=wwd2bxxxx499947417&amp;secert=NLCixxxxQbDcyYstqxYD-9ww8OP9Uxxxxx9D4E&amp;agentId=1000xxx&amp;msg=hello">https://twikoo-xxxxxxxxxx-1305947611.ap-shanghai.app.tcloudbase.com/weixin-push?id=wwd2bxxxx499947417&amp;secert=NLCixxxxQbDcyYstqxYD-9ww8OP9Uxxxxx9D4E&amp;agentId=1000xxx&amp;msg=hello</a></p><p>返回以下内容，则说明配置成功。</p><div class="code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;</code></pre></div><p>msg 后的内容，是 Unicode 编码后的「随便测试一下吧」，点击这里可以转换 <a href="https://tool.chinaz.com/tools/unicode.aspx">Unicode编码转换 - 站长工具 (chinaz.com)</a> 。</p><p>将 <code>URL</code> 复制到 Twikoo 设置的对应位置。大功告成。</p><h2 id="1-6-快速查看消息"><a href="#1-6-快速查看消息" class="headerlink" title="1.6 快速查看消息"></a>1.6 快速查看消息</h2><p>打开手机企业微信，处于「消息」一栏，左滑，点击小齿轮，进入设置。「新消息通知」→「仅在企业微信中接受消息」，关闭。然后可以卸载企业微信。</p><p>打开微信，你会在「通讯录」看到「我的企业」一行，进入，将应用添加至桌面。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://guole.fun/posts/626/">搭建微信通知API实现Twikoo新消息提醒 | Guo Le’s Blog</a></li><li><a href="https://sct.ftqq.com/forward">Server酱·Turbo版 (ftqq.com)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Twikoo</tag>
      
      <tag>博客评论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为你的博客添加谷歌翻译</title>
    <link href="/posts/3a62d20/"/>
    <url>/posts/3a62d20/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h2><ul><li>使用 <strong>translate.google.cn</strong> 资源，大陆地区也能使用。</li><li>自动判断浏览器语言。</li><li>支持 Google 翻译支持的所有语言。</li><li>隐藏谷歌翻译的样式，更美观。</li></ul><h2 id="1-2-footer-ejs"><a href="#1-2-footer-ejs" class="headerlink" title="1.2 footer.ejs"></a>1.2 footer.ejs</h2><p>在 Blog\themes\fluid\layout\_partial 路径，打开 <code>footer.ejs</code> 文件，添加以下代码。</p><div class="code-wrapper"><pre><code class="hljs ejs">&lt;script type=&quot;text/javascript&quot;&gt;    function googleTranslateElementInit()&#123;        new google.translate.TranslateElement(&#123;            pageLanguage: &#x27;zh-CN&#x27;,            includedLanguages: &#x27;af,ga,sq,it,ar,ja,az,kn,eu,ko,bn,la,be,lv,bg,lt,ca,mk,zh-CN,ms,zh-TW,mt,hr,no,cs,fa,da,pl,nl,pt,en,ro,eo,ru,et,sr,tl,sk,fi,sl,fr,es,gl,sw,ka,sv,de,ta,el,te,gu,th,ht,tr,iw,uk,hi,ur,hu,vi,is,cy,id,yi&#x27;,            autoDisplay:false        &#125;,&#x27;google_translate_element&#x27;);    &#125;&lt;/script&gt;</code></pre></div><h2 id="1-3-JS-文件"><a href="#1-3-JS-文件" class="headerlink" title="1.3 JS 文件"></a>1.3 JS 文件</h2><p>在 Blog\source\js 路径，创建 <code>translate-google.js</code> 文件。添加以下代码。</p><div class="code-wrapper"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> gtConstEvalStartTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();    <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">this</span> || self,        l = <span class="hljs-regexp">/^[\w+/_-]+[=]&#123;0,2&#125;$/</span>,        m = <span class="hljs-literal">null</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">return</span> (a = a.querySelector &amp;&amp; a.querySelector(<span class="hljs-string">&quot;script[nonce]&quot;</span>)) &amp;&amp; (a = a.nonce || a.getAttribute(<span class="hljs-string">&quot;nonce&quot;</span>)) &amp;&amp;            l.test(a) ? a : <span class="hljs-string">&quot;&quot;</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params">a, b</span>) </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;&#125;        c.prototype = b.prototype;        a.i = b.prototype;        a.prototype = <span class="hljs-keyword">new</span> c;        a.prototype.constructor = a;        a.h = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">g, f, k</span>) </span>&#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-built_in">Array</span>(<span class="hljs-built_in">arguments</span>.length - <span class="hljs-number">2</span>), d = <span class="hljs-number">2</span>; d &lt; <span class="hljs-built_in">arguments</span>.length; d++) e[d - <span class="hljs-number">2</span>] = <span class="hljs-built_in">arguments</span>[d];            <span class="hljs-keyword">return</span> b.prototype[f].apply(g, e)        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">q</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">return</span> a    &#125;;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">r</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Error</span>.captureStackTrace) <span class="hljs-built_in">Error</span>.captureStackTrace(<span class="hljs-built_in">this</span>, r);        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">Error</span>().stack;            b &amp;&amp; (<span class="hljs-built_in">this</span>.stack = b)        &#125;        a &amp;&amp; (<span class="hljs-built_in">this</span>.message = <span class="hljs-built_in">String</span>(a))    &#125;    p(r, <span class="hljs-built_in">Error</span>);    r.prototype.name = <span class="hljs-string">&quot;CustomError&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">u</span>(<span class="hljs-params">a, b</span>) </span>&#123;        a = a.split(<span class="hljs-string">&quot;%s&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-string">&quot;&quot;</span>, g = a.length - <span class="hljs-number">1</span>, f = <span class="hljs-number">0</span>; f &lt; g; f++) c += a[f] + (f &lt; b.length ? b[f] : <span class="hljs-string">&quot;%s&quot;</span>);        r.call(<span class="hljs-built_in">this</span>, c + a[g])    &#125;    p(u, r);    u.prototype.name = <span class="hljs-string">&quot;AssertionError&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">v</span>(<span class="hljs-params">a, b</span>) </span>&#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> u(<span class="hljs-string">&quot;Failure&quot;</span> + (a ? <span class="hljs-string">&quot;: &quot;</span> + a : <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>));    &#125;;    <span class="hljs-keyword">var</span> w;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span>(<span class="hljs-params">a, b</span>) </span>&#123;        <span class="hljs-built_in">this</span>.g = b === y ? a : <span class="hljs-string">&quot;&quot;</span>    &#125;    x.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.g + <span class="hljs-string">&quot;&quot;</span>    &#125;;    <span class="hljs-keyword">var</span> y = &#123;&#125;;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">z</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>];        b || (b = <span class="hljs-built_in">document</span>.body.parentNode.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;head&quot;</span>)));        b.appendChild(a)    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_loadJs</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">document</span>;        <span class="hljs-keyword">var</span> c = <span class="hljs-string">&quot;SCRIPT&quot;</span>;        <span class="hljs-string">&quot;application/xhtml+xml&quot;</span> === b.contentType &amp;&amp; (c = c.toLowerCase());        c = b.createElement(c);        c.type = <span class="hljs-string">&quot;text/javascript&quot;</span>;        c.charset = <span class="hljs-string">&quot;UTF-8&quot;</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">void</span> <span class="hljs-number">0</span> === w) &#123;            b = <span class="hljs-literal">null</span>;            <span class="hljs-keyword">var</span> g = h.trustedTypes;            <span class="hljs-keyword">if</span> (g &amp;&amp; g.createPolicy) &#123;                <span class="hljs-keyword">try</span> &#123;                    b = g.createPolicy(<span class="hljs-string">&quot;goog#html&quot;</span>, &#123;                        <span class="hljs-attr">createHTML</span>: q,                        <span class="hljs-attr">createScript</span>: q,                        <span class="hljs-attr">createScriptURL</span>: q                    &#125;)                &#125; <span class="hljs-keyword">catch</span> (t) &#123;                    h.console &amp;&amp; h.console.error(t.message)                &#125;                w = b            &#125; <span class="hljs-keyword">else</span> w = b        &#125;        a = (b = w) ? b.createScriptURL(a) : a;        a = <span class="hljs-keyword">new</span> x(a, y);        a: &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">var</span> f = c &amp;&amp; c.ownerDocument,                    k = f &amp;&amp; (f.defaultView || f.parentWindow);                k = k || h;                <span class="hljs-keyword">if</span> (k.Element &amp;&amp; k.Location) &#123;                    <span class="hljs-keyword">var</span> e = k;                    <span class="hljs-keyword">break</span> a                &#125;            &#125; <span class="hljs-keyword">catch</span> (t) &#123;&#125;            e = <span class="hljs-literal">null</span>        &#125;        <span class="hljs-keyword">if</span> (e &amp;&amp; <span class="hljs-string">&quot;undefined&quot;</span> != <span class="hljs-keyword">typeof</span> e.HTMLScriptElement &amp;&amp; (!c || !(c <span class="hljs-keyword">instanceof</span> e.HTMLScriptElement) &amp;&amp; (c <span class="hljs-keyword">instanceof</span> e                .Location || c <span class="hljs-keyword">instanceof</span> e.Element))) &#123;            e = <span class="hljs-keyword">typeof</span> c;            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;object&quot;</span> == e &amp;&amp; <span class="hljs-literal">null</span> != c || <span class="hljs-string">&quot;function&quot;</span> == e) <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">var</span> d = c.constructor.displayName || c.constructor.name || <span class="hljs-built_in">Object</span>.prototype.toString.call(c)            &#125; <span class="hljs-keyword">catch</span> (t) &#123;                d = <span class="hljs-string">&quot;&lt;object could not be stringified&gt;&quot;</span>            &#125; <span class="hljs-keyword">else</span> d = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> === c ? <span class="hljs-string">&quot;undefined&quot;</span> : <span class="hljs-literal">null</span> === c ? <span class="hljs-string">&quot;null&quot;</span> : <span class="hljs-keyword">typeof</span> c;            v(<span class="hljs-string">&quot;Argument is not a %s (or a non-Element, non-Location mock); got: %s&quot;</span>,                <span class="hljs-string">&quot;HTMLScriptElement&quot;</span>, d)        &#125;        a <span class="hljs-keyword">instanceof</span> x &amp;&amp; a.constructor === x ? d = a.g : (d = <span class="hljs-keyword">typeof</span> a, v(            <span class="hljs-string">&quot;expected object of type TrustedResourceUrl, got &#x27;&quot;</span> + a + <span class="hljs-string">&quot;&#x27; of type &quot;</span> + (<span class="hljs-string">&quot;object&quot;</span> != d ? d : a ?                <span class="hljs-built_in">Array</span>.isArray(a) ? <span class="hljs-string">&quot;array&quot;</span> : d : <span class="hljs-string">&quot;null&quot;</span>)), d = <span class="hljs-string">&quot;type_error:TrustedResourceUrl&quot;</span>);        c.src = d;        (d = c.ownerDocument &amp;&amp; c.ownerDocument.defaultView) &amp;&amp; d != h ? d = n(d.document) : (<span class="hljs-literal">null</span> === m &amp;&amp; (m = n(            h.document)), d = m);        d &amp;&amp; c.setAttribute(<span class="hljs-string">&quot;nonce&quot;</span>, d);        z(c)    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_loadCss</span>(<span class="hljs-params">a</span>) </span>&#123;        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;link&quot;</span>);        b.type = <span class="hljs-string">&quot;text/css&quot;</span>;        b.rel = <span class="hljs-string">&quot;stylesheet&quot;</span>;        b.charset = <span class="hljs-string">&quot;UTF-8&quot;</span>;        b.href = a;        z(b)    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_isNS</span>(<span class="hljs-params">a</span>) </span>&#123;        a = a.split(<span class="hljs-string">&quot;.&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> b = <span class="hljs-built_in">window</span>, c = <span class="hljs-number">0</span>; c &lt; a.length; ++c)            <span class="hljs-keyword">if</span> (!(b = b[a[c]])) <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span>;        <span class="hljs-keyword">return</span> !<span class="hljs-number">0</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_setupNS</span>(<span class="hljs-params">a</span>) </span>&#123;        a = a.split(<span class="hljs-string">&quot;.&quot;</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> b = <span class="hljs-built_in">window</span>, c = <span class="hljs-number">0</span>; c &lt; a.length; ++c) b.hasOwnProperty ? b.hasOwnProperty(a[c]) ? b = b[a[c]] : b =            b[a[c]] = &#123;&#125; : b = b[a[c]] || (b[a[c]] = &#123;&#125;);        <span class="hljs-keyword">return</span> b    &#125;    <span class="hljs-built_in">window</span>.addEventListener &amp;&amp; <span class="hljs-string">&quot;undefined&quot;</span> == <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.readyState &amp;&amp; <span class="hljs-built_in">window</span>.addEventListener(        <span class="hljs-string">&quot;DOMContentLoaded&quot;</span>,        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">document</span>.readyState = <span class="hljs-string">&quot;complete&quot;</span>        &#125;, !<span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span> (_isNS(<span class="hljs-string">&#x27;google.translate.Element&#x27;</span>)) &#123;        <span class="hljs-keyword">return</span>    &#125;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> c = _setupNS(<span class="hljs-string">&#x27;google.translate._const&#x27;</span>);        c._cest = gtConstEvalStartTime;        gtConstEvalStartTime = <span class="hljs-literal">undefined</span>;        c._cl = navigator.language || navigator.userLanguage;        c._cuc = <span class="hljs-string">&#x27;googleTranslateElementInit&#x27;</span>;        c._cac = <span class="hljs-string">&#x27;&#x27;</span>;        c._cam = <span class="hljs-string">&#x27;&#x27;</span>;        c._ctkk = <span class="hljs-string">&#x27;449649.3822363247&#x27;</span>;        <span class="hljs-keyword">var</span> h = <span class="hljs-string">&#x27;translate.googleapis.com&#x27;</span>;        <span class="hljs-keyword">var</span> s = (<span class="hljs-literal">true</span> ? <span class="hljs-string">&#x27;https&#x27;</span> : <span class="hljs-built_in">window</span>.location.protocol == <span class="hljs-string">&#x27;https:&#x27;</span> ? <span class="hljs-string">&#x27;https&#x27;</span> : <span class="hljs-string">&#x27;http&#x27;</span>) + <span class="hljs-string">&#x27;://&#x27;</span>;        <span class="hljs-keyword">var</span> b = s + h;        c._pah = h;        c._pas = s;        c._pbi = b + <span class="hljs-string">&#x27;/translate_static/img/te_bk.gif&#x27;</span>;        c._pci = b + <span class="hljs-string">&#x27;/translate_static/img/te_ctrl3.gif&#x27;</span>;        c._pli = b + <span class="hljs-string">&#x27;/translate_static/img/loading.gif&#x27;</span>;        c._plla = h + <span class="hljs-string">&#x27;/translate_a/l&#x27;</span>;        c._pmi = b + <span class="hljs-string">&#x27;/translate_static/img/mini_google.png&#x27;</span>;        c._ps = b + <span class="hljs-string">&#x27;/translate_static/css/translateelement.css&#x27;</span>;        c._puh = <span class="hljs-string">&#x27;translate.google.cn&#x27;</span>;        _loadCss(c._ps);        _loadJs(b + <span class="hljs-string">`/translate_static/js/element/main_<span class="hljs-subst">$&#123;navigator.language || navigator.userLanguage&#125;</span>.js`</span>);    &#125;)();&#125;)();</code></pre></div><h2 id="1-4-CSS-文件"><a href="#1-4-CSS-文件" class="headerlink" title="1.4 CSS 文件"></a>1.4 CSS 文件</h2><p>在 Blog\source\css 路径，创建 <code>translate-google.css</code> 文件。添加以下代码。</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#google_translate_element</span> &#123;    <span class="hljs-attribute">overflow</span>: hidden;    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.25rem</span>;&#125;<span class="hljs-selector-class">.goog-te-gadget</span> &#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;&#125;<span class="hljs-selector-class">.goog-te-combo</span> &#123;    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.75rem</span> <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1rem</span> <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">outline</span>: <span class="hljs-number">2px</span> solid transparent <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">outline-offset</span>: <span class="hljs-number">2px</span> <span class="hljs-meta">!important</span>;&#125;<span class="hljs-selector-class">.goog-logo-link</span> &#123;    <span class="hljs-attribute">display</span>: none <span class="hljs-meta">!important</span>;&#125;<span class="hljs-selector-class">.goog-te-banner-frame</span> &#123;    <span class="hljs-attribute">display</span>: none <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">position</span>: fixed <span class="hljs-meta">!important</span>;&#125;<span class="hljs-selector-class">.goog-te-gadget</span> <span class="hljs-selector-class">.goog-te-combo</span> &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">4px</span> <span class="hljs-number">0</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-meta">!important</span>;&#125;</code></pre></div><h2 id="1-5-config-fluid-yml"><a href="#1-5-config-fluid-yml" class="headerlink" title="1.5 config.fluid.yml"></a>1.5 config.fluid.yml</h2><p>在 <code>config.fluid.yml</code> 文件，引入 js、css 文件。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">custom_js:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">/js/translate-google.js</span><span class="hljs-attr">custom_css:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/translate-google.css</span></code></pre></div><p>本地预览，即可看到效果。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://imiku.me/2021/09/28/adding-google-translate-to-a-web-site.html/">添加谷歌翻译到你的网站 (imiku.me)</a></p>]]></content>
    
    
    <categories>
      
      <category>博客优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>谷歌翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在页脚快速使用一言 / 今日诗词</title>
    <link href="/posts/b7a3bf10/"/>
    <url>/posts/b7a3bf10/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-一言"><a href="#1-1-一言" class="headerlink" title="1.1 一言"></a>1.1 一言</h2><p>直接复制代码就行。</p><p>源码来自大佬的主题：<a href="https://github.com/zsbai/hexo-theme-fluid-mod">zsbai/hexo-theme-fluid-mod: Hexo Fluid 主题 UI 修改版</a> 。</p><p>大佬博客：<a href="https://www.julydate.com/">七夏浅笑 (julydate.com)</a></p><ol><li><p>进入路径：Blog\themes\fluid\layout\_partial\plugins，创建 <code>hitokoto.ejs</code> 文件。内部代码如下：</p><div class="code-wrapper"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(theme.footer.hitokoto) &#123; %&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">  <span class="hljs-comment">/*一言API*/</span></span></span><span class="javascript"><span class="xml">  $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">    getHitokoto();</span></span><span class="javascript"><span class="xml">  &#125;);</span></span><span class="javascript"><span class="xml"></span></span><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hitokoto</span>(<span class="hljs-params">e</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">    $(<span class="hljs-string">&quot;#hitokoto&quot;</span>).stop().fadeOut(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">      $(<span class="hljs-string">&quot;#hitokoto&quot;</span>).html(e.hitokoto);</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;hitokotoa&#x27;</span>);</span></span><span class="javascript"><span class="xml">      element.href = <span class="hljs-string">&quot;https://hitokoto.cn/?uuid=&quot;</span> + e.uuid;</span></span><span class="javascript"><span class="xml">      $(<span class="hljs-string">&quot;#hitokoto&quot;</span>).stop().fadeIn()</span></span><span class="javascript"><span class="xml">    &#125;)</span></span><span class="javascript"><span class="xml">  &#125;;</span></span><span class="javascript"><span class="xml"></span></span><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHitokoto</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> e = [<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;k&quot;</span>];</span></span><span class="javascript"><span class="xml">    <span class="hljs-comment">// 返回句子类型 https://developer.hitokoto.cn/sentence/#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0</span></span></span><span class="javascript"><span class="xml">    fetch(<span class="hljs-string">&#x27;https://v1.hitokoto.cn/?encode=json&amp;charset=utf-8&amp;c=&#x27;</span> + e[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * e.length)], &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">cache</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span></span></span><span class="javascript"><span class="xml">    &#125;).then(</span></span><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json()</span></span><span class="javascript"><span class="xml">    ).then(</span></span><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">        hitokoto(data)</span></span><span class="javascript"><span class="xml">        <span class="hljs-built_in">setTimeout</span>(getHitokoto, <span class="hljs-number">8000</span>) <span class="hljs-comment">//再次获取 hitokoto 时间，时间单位是毫秒</span></span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">    ).catch(</span></span><span class="javascript"><span class="xml">      <span class="hljs-built_in">console</span>.error</span></span><span class="javascript"><span class="xml">    )</span></span><span class="javascript"><span class="xml">  &#125;;</span></span><span class="javascript"><span class="xml"></span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>&lt;% &#125; %&gt;</code></pre></div></li><li><p>进入 Blog\themes\fluid\layout\_partial 路径，打开 <code>footer.ejs</code> 文件。添加代码如下：</p><p><strong>注意，不能用代码格式化插件格式化代码。格式化会报错。</strong></p><div class="code-wrapper"><pre><code class="hljs js">&lt;footer <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;text-center mt-5 py-3&quot;</span>&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-content&quot;</span>&gt;</span></span><span class="xml">    &lt;%- theme.footer.content %&gt;</span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  &lt;%- partial(<span class="hljs-string">&#x27;_partial/statistics.ejs&#x27;</span>) %&gt;  &lt;%- partial(<span class="hljs-string">&#x27;_partial/beian.ejs&#x27;</span>) %&gt;  &lt;% <span class="hljs-keyword">if</span>(theme.web_analytics.cnzz) &#123; %&gt;    &lt;!-- cnzz Analytics Icon --&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cnzz_stat_icon_&lt;%= theme.web_analytics.cnzz %&gt;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>  &lt;% &#125; %&gt;    &lt;!-- 添加的代码 一言 --&gt;&lt;!-- ========================================================================== --&gt;&lt;% <span class="hljs-keyword">if</span>(theme.footer.hitokoto) &#123; %&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-hitokoto&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokotoa&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener noreferrer&quot;</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&lt;% &#125; %&gt;&lt;!-- ========================================================================== --&gt;    &lt;/footer&gt;</code></pre></div></li><li><p>进入 Blog\themes\fluid\layout\_partial 路径，打开 <code>script.ejs</code> 文件。添加代码如下：</p><div class="code-wrapper"><pre><code class="hljs js">&lt;%- partial(<span class="hljs-string">&#x27;_partial/plugins/nprogress.ejs&#x27;</span>) %&gt;&lt;%- js_ex(theme.static_prefix.jquery, <span class="hljs-string">&#x27;jquery.min.js&#x27;</span>) %&gt;&lt;%- js_ex(theme.static_prefix.bootstrap, <span class="hljs-string">&#x27;js/bootstrap.min.js&#x27;</span>) %&gt;&lt;%- js_ex(theme.static_prefix.internal_js, <span class="hljs-string">&#x27;events.js&#x27;</span>) %&gt;&lt;%- js_ex(theme.static_prefix.internal_js, <span class="hljs-string">&#x27;plugins.js&#x27;</span>) %&gt;&lt;%- partial(<span class="hljs-string">&#x27;_partial/plugins/hitokoto.ejs&#x27;</span>) %&gt;&lt;!-- 添加的代码，只能放在这。放在第一行的下面，会失效。 --&gt;&lt;!-- Plugins --&gt;</code></pre></div></li><li><p>打开 <code>_config.fluid.yml</code> 文件，添加如下代码：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 页脚</span><span class="hljs-comment"># Footer</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">footer:</span>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">  &#x27;</span>  <span class="hljs-attr">hitokoto:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 显示一言，关于一言：https://hitokoto.cn/</span></code></pre></div></li><li><p>本地预览，即可看到效果。</p></li></ol><p><font style="color:#ed1c24;font-weight:bolder;">注意</font>：如果你要在页脚使用这串代码。<code>slogan</code> 处不能使用开启 <code>hitokoto</code> 。开启会使<code>slogan</code> 处的「一言」失效。如下：</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/%E5%8A%A8%E7%94%BB5.gif"></p><h2 id="1-2-今日诗词"><a href="#1-2-今日诗词" class="headerlink" title="1.2 今日诗词"></a>1.2 今日诗词</h2><p>在 Blog\themes\fluid\layout\_partial 路径，打开 <code>footer.ejs</code> ，修改如下：</p><div class="code-wrapper"><pre><code class="hljs js">&lt;footer <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;text-center mt-5 py-3&quot;</span>&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-content&quot;</span>&gt;</span></span><span class="xml">    &lt;%- theme.footer.content %&gt;</span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  &lt;%- partial(<span class="hljs-string">&#x27;_partial/statistics.ejs&#x27;</span>) %&gt;  &lt;%- partial(<span class="hljs-string">&#x27;_partial/beian.ejs&#x27;</span>) %&gt;  &lt;% <span class="hljs-keyword">if</span>(theme.web_analytics.cnzz) &#123; %&gt;    &lt;!-- cnzz Analytics Icon --&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cnzz_stat_icon_&lt;%= theme.web_analytics.cnzz %&gt;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>  &lt;% &#125; %&gt;&lt;!-- 添加的代码<span class="hljs-number">1</span> 今日诗词，只有句子 --&gt;&lt;!-- ============================================================================== --&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jinrishici-sentence&quot;</span>&gt;</span>正在加载今日诗词....<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>&lt;!-- ============================================================================== --&gt;&lt;!-- 添加的代码<span class="hljs-number">2</span> 今日诗词，句子+作者 --&gt;&lt;!-- 使用代码<span class="hljs-number">2</span>，文字会有点大，需要调整下 --&gt;&lt;!-- ============================================================================== --&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poem_sentence&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;poem_info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">    jinrishici.load(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> sentence = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.poem_sentence&quot;</span>)</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> info = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.poem_info&quot;</span>)</span></span><span class="javascript"><span class="xml">      sentence.innerHTML = result.data.content</span></span><span class="javascript"><span class="xml">      info.innerHTML = <span class="hljs-string">&#x27;— &#x27;</span> + result.data.origin.author</span></span><span class="javascript"><span class="xml">    &#125;);</span></span><span class="javascript"><span class="xml"></span></span><span class="javascript"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>    &lt;/footer&gt;</code></pre></div><p><font style="color:#ed1c24;font-weight:bolder;">注意</font>：如果你要在页脚使用<strong>代码1</strong>。<code>slogan</code> 处不能使用开启 <code>jinrishici</code> 。开启会使 <code>slogan</code> 处的「今日诗词」失效。只有页脚的「今日诗词」会显示。</p><p>本地预览，即可看到效果。</p><blockquote><p>如果你想在 slogan 处和页脚都显示句子的话，建议 slogan 处使用 <code>jinrishici</code> ，页脚使用 <code>hitokoto</code> 。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://guanqr.com/tech/website/add-jinrishici-in-meme/">https://guanqr.com/tech/website/add-jinrishici-in-meme/</a></li><li><a href="https://developer.hitokoto.cn/">一言开发者中心</a> </li><li><a href="https://www.jinrishici.com/doc/">今日诗词开放接口</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一言</tag>
      
      <tag>今日诗词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在首页 Slogan 处添加一言 / 今日诗词</title>
    <link href="/posts/b6234a86/"/>
    <url>/posts/b6234a86/</url>
    
    <content type="html"><![CDATA[<p>先声明下，我是前端小白，目前才学到 HTML、CSS。所以下面的 JS 代码，我会依照我的理解来解释。如果有错误，请在评论区指出。非常感谢！</p><p><strong>本文的代码可以实现在首页 <code>slogan</code> 播放一言 / 今日诗词 / 自定义内容。</strong></p><p>参考文章的代码，亲测无法实现。但非常感谢他们的文章，没有他们的文章，我肯定写不出来。我也只是做了简单修改而已。</p><h2 id="1-1-一言、今日诗词"><a href="#1-1-一言、今日诗词" class="headerlink" title="1.1 一言、今日诗词"></a>1.1 一言、今日诗词</h2><p>1、一言</p><p>官网：<a href="https://hitokoto.cn/">https://hitokoto.cn/</a> 、一言开发者中心：<a href="https://developer.hitokoto.cn/">https://developer.hitokoto.cn/</a> 。</p><p>一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。 或是感动，或是开心，有或是单纯的回忆。（官网）</p><p>2、今日诗词</p><p>官网：<a href="https://www.jinrishici.com/">https://www.jinrishici.com/</a> 、开发文档：<a href="https://www.jinrishici.com/doc/">https://www.jinrishici.com/doc/</a></p><p>今日诗词 API 是一个可以返回一句古诗词名句的接口。它可以通过图片和 JSON 格式调用。今日诗词 API 根据不同地点、时间、节日、季节、天气、景观、城市进行智能推荐。</p><p>下面开始讲解首页 Slogan 上如何显示一言 / 今日诗词。</p><h2 id="1-2-typed-ejs"><a href="#1-2-typed-ejs" class="headerlink" title="1.2 typed.ejs"></a>1.2 typed.ejs</h2><p>进入路径 Blog\themes\fluid\layout\_partial\plugins。打开 <code>typed.ejs</code> 文件。复制下面的代码覆盖掉 <code>typed.ejs</code> 文件原有的代码。</p><p><strong>注意，不能用代码格式化插件格式化代码。格式化会报错。</strong></p><div class="code-wrapper"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(theme.fun_features.typing.enable &amp;&amp; page.subtitle !== <span class="hljs-literal">false</span>)&#123; %&gt; &lt;%-js_ex(theme.static_prefix.typed, <span class="hljs-string">&quot;/typed.min.js&quot;</span>) %&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span></span></span><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot;</span></span></span><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span></span></span><span class="hljs-tag"><span class="xml">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">typing</span>(<span class="hljs-params">id, title</span>)</span>&#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> Typed(<span class="hljs-string">&#x27;#&#x27;</span> + id, &#123;</span></span><span class="javascript"><span class="xml">          <span class="hljs-attr">strings</span>: [</span></span><span class="javascript"><span class="xml">            <span class="hljs-string">&#x27;  &#x27;</span>,</span></span><span class="javascript"><span class="xml">            title + <span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,</span></span><span class="javascript"><span class="xml">          ],</span></span><span class="javascript"><span class="xml">          <span class="hljs-attr">cursorChar</span>: <span class="hljs-string">&quot;&lt;%- theme.fun_features.typing.cursorChar %&gt;&quot;</span>,</span></span><span class="javascript"><span class="xml">          <span class="hljs-attr">typeSpeed</span>: &lt;%- theme.fun_features.typing.typeSpeed %&gt;,</span></span><span class="javascript"><span class="xml">          loop: &lt;%- theme.fun_features.typing.loop %&gt;,</span></span><span class="javascript"><span class="xml">      &#125;);</span></span><span class="javascript"><span class="xml">      typed.stop();</span></span><span class="javascript"><span class="xml">      $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">          $(<span class="hljs-string">&quot;.typed-cursor&quot;</span>).addClass(<span class="hljs-string">&quot;h2&quot;</span>);</span></span><span class="javascript"><span class="xml">          typed.start();</span></span><span class="javascript"><span class="xml">      &#125;);</span></span><span class="javascript"><span class="xml">  &#125;</span></span><span class="javascript"><span class="xml"></span></span><span class="javascript"><span class="xml">  &lt;% <span class="hljs-keyword">if</span>(is_post()) &#123; %&gt;</span></span><span class="javascript"><span class="xml">      typing(<span class="hljs-string">&quot;subtitle&quot;</span>, <span class="hljs-string">&quot;&lt;%- page.title %&gt;&quot;</span>)  <span class="hljs-comment">// 打印文章标题</span></span></span><span class="javascript"><span class="xml">  &lt;% &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(theme.index.slogan.hitokoto &amp;&amp; !page.layout) &#123; %&gt;</span></span><span class="javascript"><span class="xml">      fetch(<span class="hljs-string">&#x27;https://v1.hitokoto.cn?c=d&amp;c=ch&amp;c=i&#x27;</span>)</span></span><span class="javascript"><span class="xml">      .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())</span></span><span class="javascript"><span class="xml">      .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">        typing(<span class="hljs-string">&quot;hitokoto&quot;</span>, data.hitokoto + <span class="hljs-string">&#x27;&lt;br/&gt; &lt;h6&gt;&#x27;</span> + <span class="hljs-string">&#x27;——&#x27;</span> + data.from_who +<span class="hljs-string">&#x27;「&#x27;</span> + data.from + <span class="hljs-string">&#x27;」&#x27;</span>+ <span class="hljs-string">&#x27;&lt;/h6&gt;&#x27;</span>)</span></span><span class="javascript"><span class="xml">      &#125;)</span></span><span class="javascript"><span class="xml">      .catch(<span class="hljs-built_in">console</span>.error)</span></span><span class="javascript"><span class="xml">  &lt;% &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(theme.index.slogan.jinrishici &amp;&amp; !page.layout) &#123; %&gt;</span></span><span class="javascript"><span class="xml">      jinrishici.load(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">          typing(<span class="hljs-string">&quot;jinrishici&quot;</span>, result.data.content + <span class="hljs-string">&#x27;&lt;br/&gt; &lt;h6&gt;&#x27;</span> + <span class="hljs-string">&#x27;——&#x27;</span> + <span class="hljs-string">&#x27;【&#x27;</span> + result.data.origin.dynasty + <span class="hljs-string">&#x27;】&#x27;</span> + result.data.origin.author + <span class="hljs-string">&#x27;《&#x27;</span> + result.data.origin.title + <span class="hljs-string">&#x27;》&#x27;</span>+ <span class="hljs-string">&#x27;&lt;/h6&gt;&#x27;</span>)</span></span><span class="javascript"><span class="xml">      &#125;);</span></span><span class="javascript"><span class="xml">  &lt;% &#125; <span class="hljs-keyword">else</span>&#123; %&gt;</span></span><span class="javascript"><span class="xml">      typing(<span class="hljs-string">&quot;subtitle&quot;</span>, <span class="hljs-string">&quot;&lt;%- page.subtitle %&gt;&quot;</span>)  <span class="hljs-comment">// 打印首页一言、今日诗词</span></span></span><span class="javascript"><span class="xml">  &lt;% &#125; %&gt;</span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>&lt;% &#125; %&gt;&lt;!-- 注意，不能用代码格式化插件格式化代码 --&gt;&lt;!-- typing(<span class="hljs-string">&quot;hitokoto&quot;</span>, data.hitokoto + <span class="hljs-string">&#x27;&lt;br /&gt; &lt;h5&gt;&#x27;</span> + <span class="hljs-string">&#x27;——&#x27;</span> + data.from + <span class="hljs-string">&#x27;&lt;/h5&gt;&#x27;</span>)typing(<span class="hljs-string">&quot;hitokoto&quot;</span>, <span class="hljs-string">&#x27;『&#x27;</span> + data.hitokoto + <span class="hljs-string">&#x27;』&#x27;</span> + <span class="hljs-string">&#x27;&lt;br /&gt; &lt;h5&gt;&#x27;</span>+ <span class="hljs-string">&#x27;——&#x27;</span> + <span class="hljs-string">&#x27;「&#x27;</span> + data.from + <span class="hljs-string">&#x27;」&#x27;</span> + <span class="hljs-string">&#x27;&lt;/h5&gt;&#x27;</span>) --&gt;</code></pre></div><ul><li><p>将原来的功能放在 <code>typing</code> 函数里面，再判断打字机显示 subtitle / hitokoto / jinrishici。</p></li><li><p>所有的 post 都显示 subtitle，即文章页的文章 title ，所有的 page 的 subtitle 是网站页面的标题。（除开文章页面）</p></li><li><p><strong>代码实现逻辑</strong></p><ul><li>首先 <code>if</code> 判断，是否为 <code>post</code> ，如果是，则在文章页面打印文章标题。必须是 <code>page.title</code> (文章标题)。</li><li>如果不是，进行第一个 <code>else if</code> 判断。为真，则打印一言。此时需要排除主页以外的页面(分类、标签、关于等页面)，则在判断语句中用 <code>!page.layout</code> 排除非首页页面。</li><li>第一个 <code>else if</code> 判断为假，进行第二个 <code>else if</code> 判断。为真，则打印今日诗词。同样需要在判断语句中用 <code>!page.layout</code> 排除非首页页面。</li><li>第二个 <code>else if</code> 判断为假，进行 <code>else</code> 判断，打印 <code>config.yml</code> 文件中 <code>slogan.text</code> 的内容。</li></ul></li><li><p>今日诗词</p><ul><li>需要使用官方给的 <strong>JS-SDK</strong>（见第3行）</li><li>使用加载函数 <code>jinrishici.load</code> 并传入回调函数，每调用一次，会传入一个新的诗词。</li><li><code>typing(&quot;jinrishici&quot;, result.data.content )</code>会显示<code>null</code></li><li>接口返回结果格式 <code>result</code> 里还有别的类型，详细见<a href="https://www.jinrishici.com/doc/#return">官方文档</a></li></ul></li></ul><h2 id="1-3-layout-ejs"><a href="#1-3-layout-ejs" class="headerlink" title="1.3 layout.ejs"></a>1.3 layout.ejs</h2><p>进入路径：Blog\themes\fluid\layout。打开 <code>layout.ejs</code> 文件。复制下面的代码覆盖掉 <code>layout.ejs</code> 文件原有的代码。</p><p><strong>注意，不能用代码格式化插件格式化代码。格式化会报错。</strong></p><div class="code-wrapper"><pre><code class="hljs js">&lt;%<span class="hljs-keyword">var</span> subtitle = page.subtitle || page.title<span class="hljs-keyword">var</span> banner_img = page.banner_img || theme.index.banner_img<span class="hljs-keyword">var</span> banner_img_height = page.banner_img_height || theme.index.banner_img_height<span class="hljs-keyword">var</span> banner_mask_alpha = page.banner_mask_alpha || theme.index.banner_mask_alpha<span class="hljs-keyword">var</span> colorSchema = theme.dark_mode &amp;&amp; theme.dark_mode.enable &amp;&amp; theme.dark_mode.default ? theme.dark_mode.default : <span class="hljs-string">&#x27;&#x27;</span>%&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;&lt;%= config.language %&gt;&quot; &lt;%= colorSchema ? `data-default-color-scheme=$&#123;colorSchema&#125;` : &#x27;&#x27; %&gt;&gt;&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;&lt;body&gt;  &lt;header style=&quot;height: &lt;%- banner_img_height %&gt;vh;&quot;&gt;    &lt;%- partial(&#x27;_partial/nav&#x27;) %&gt;    &lt;div class=&quot;banner&quot; id=&quot;banner&quot; &lt;%- theme.banner &amp;&amp; theme.banner.parallax &amp;&amp; &#x27;parallax=true&#x27; %&gt;        style=&quot;background: url(&#x27;&lt;%- url_for(banner_img) %&gt;&#x27;) no-repeat center center;          background-size: cover;&quot;&gt;      &lt;div class=&quot;full-bg-img&quot;&gt;        &lt;div class=&quot;mask flex-center&quot; style=&quot;background-color: rgba(0, 0, 0, &lt;%= parseFloat(banner_mask_alpha) %&gt;)&quot;&gt;          &lt;div class=&quot;page-header text-center fade-in-up&quot;&gt;            &lt;span class=&quot;h2&quot; id=&quot;subtitle&quot; title=&quot;&lt;%= subtitle %&gt;&quot;&gt;              &lt;% if(!theme.fun_features.typing.enable) &#123; %&gt;                &lt;%- subtitle %&gt;              &lt;% &#125; %&gt;            &lt;/span&gt;&lt;!-- 添加的代码 --&gt;&lt;!-- ========================================================================= --&gt;            &lt;% if(!is_post()) &#123; %&gt;              &lt;% if(theme.index.slogan.hitokoto) &#123; %&gt;                  &lt;br&gt;                  &lt;span class=&quot;h2&quot; id=&quot;hitokoto&quot;&gt;                  &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;                    &lt;%- hitokoto %&gt;                  &lt;% &#125; %&gt;                  &lt;/span&gt;              &lt;% &#125; else if(theme.index.slogan.jinrishici) &#123; %&gt;                  &lt;br&gt;                  &lt;span class=&quot;h2&quot; id=&quot;jinrishici&quot;&gt;                  &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;                    &lt;%- jinrishici %&gt;                  &lt;% &#125; %&gt;                  &lt;/span&gt;              &lt;% &#125; %&gt;          &lt;% &#125; %&gt;&lt;!-- ========================================================================= --&gt;            &lt;% if(is_post() &amp;&amp; page.meta !== false) &#123; %&gt;              &lt;%- partial(&#x27;_partial/post-meta&#x27;) %&gt;            &lt;% &#125; %&gt;          &lt;/div&gt;          &lt;% if (theme.scroll_down_arrow.enable &amp;&amp; theme.scroll_down_arrow.banner_height_limit &lt;= banner_img_height &amp;&amp; page.layout !== &#x27;404&#x27;) &#123; %&gt;            &lt;div class=&quot;scroll-down-bar&quot;&gt;              &lt;i class=&quot;iconfont icon-arrowdown&quot;&gt;&lt;/i&gt;            &lt;/div&gt;          &lt;% &#125; %&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/header&gt;  &lt;main&gt;    &lt;% if(is_post() || page.layout === &#x27;404&#x27;) &#123; %&gt;      &lt;%- body %&gt;    &lt;% &#125; else &#123; %&gt;      &lt;div class=&quot;container nopadding-x-md&quot;&gt;        &lt;div class=&quot;py-5&quot; id=&quot;board&quot;          &lt;%- banner_img_height &gt;= 100 &amp;&amp; theme.banner &amp;&amp; theme.banner.parallax ? &#x27;style=margin-top:0&#x27; : &#x27;&#x27; %&gt;&gt;          &lt;% if(page.layout === &#x27;about&#x27;) &#123; %&gt;            &lt;div class=&quot;about-avatar&quot;&gt;              &lt;img src=&quot;&lt;%= url_for(theme.about.avatar) %&gt;&quot;                  class=&quot;img-fluid&quot; alt=&quot;avatar&quot;&gt;            &lt;/div&gt;          &lt;% &#125; %&gt;          &lt;div class=&quot;container&quot;&gt;            &lt;div class=&quot;row&quot;&gt;              &lt;div class=&quot;col-12 col-md-10 m-auto&quot;&gt;                &lt;%- body %&gt;              &lt;/div&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;% &#125; %&gt;    &lt;% if (theme.scroll_top_arrow.enable) &#123; %&gt;      &lt;a id=&quot;scroll-top-button&quot; aria-label=&quot;TOP&quot; href=&quot;#&quot; role=&quot;button&quot;&gt;        &lt;i class=&quot;iconfont icon-arrowup&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;      &lt;/a&gt;    &lt;% &#125; %&gt;    &lt;% if (theme.search.enable) &#123; %&gt;      &lt;%- partial(&#x27;_partial/search&#x27;) %&gt;    &lt;% &#125; %&gt;    &lt;% if (theme.custom_html) &#123; %&gt;      &lt;div class=&quot;col-lg-7 mx-auto nopadding-x-md&quot;&gt;        &lt;div class=&quot;container custom mx-auto&quot;&gt;          &lt;%- theme.custom_html %&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;% &#125; %&gt;  &lt;/main&gt;  &lt;%- partial(&#x27;_partial/footer&#x27;, &#123; params: &#123; subtitle: subtitle &#125; &#125;) %&gt;  &lt;!-- SCRIPTS --&gt;  &lt;%- partial(&#x27;_partial/scripts&#x27;) %&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- 注意，不能用代码格式化插件格式化代码 --&gt;</code></pre></div><p>这里添加的代码设置显示一言 / 今日诗词的样式和位置。</p><p><code>&lt;br&gt;</code>：断开内容与出处。</p><h2 id="1-4-config-fluid-yml"><a href="#1-4-config-fluid-yml" class="headerlink" title="1.4 _config.fluid.yml"></a>1.4 _config.fluid.yml</h2><p>打开 <code>_config.fluid.yml</code> 文件。配置如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">slogan:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;仰天长啸出门去，我辈岂是蓬蒿人&quot;</span>    <span class="hljs-attr">hitokoto:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 首页显示一言</span>    <span class="hljs-attr">jinrishici:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 首页显示今日诗词</span><span class="hljs-comment"># 等号括住的代码可删可不删</span><span class="hljs-comment"># ===================================================================</span>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>    <span class="hljs-attr">api:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 请求地址</span>      <span class="hljs-comment"># Request url</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-comment"># 请求方法</span>      <span class="hljs-comment"># Request method</span>      <span class="hljs-comment"># Available: GET | POST | PUT</span>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span>      <span class="hljs-comment"># 请求头</span>      <span class="hljs-comment"># Request headers</span>      <span class="hljs-attr">headers:</span> &#123;&#125;      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span>      <span class="hljs-attr">keys:</span> []<span class="hljs-comment"># ===================================================================</span></code></pre></div><p><code>hitokoto / jinrishici</code> 中任意值为 <code>true</code> ，则显示对应的语句。两者都为 <code>false</code> ，则显示 <code>text</code> 的内容。两者都为 <code>true</code> ，则显示 <code>hitokoto</code> 的内容。</p><h2 id="1-5-修改样式"><a href="#1-5-修改样式" class="headerlink" title="1.5 修改样式"></a>1.5 修改样式</h2><p>新建 <code>ui.css </code> 样式文件。引入主题配置。</p><p>引入方式：<a href="https://hexo.fluid-dev.com/docs/guide/#%E8%87%AA%E5%AE%9A%E4%B9%89-js-css-html">配置指南 | Hexo Fluid (fluid-dev.com)</a> ，注意：引入的 CSS、JS、HTML 文件方式最好放在 Blog\source\ 路径，不要放在主题的 <code>source</code> 目录下。</p><p>添加以下代码：</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 主页打字机 */</span><span class="hljs-selector-class">.h6</span>,<span class="hljs-selector-tag">h6</span> &#123;    <span class="hljs-attribute">display</span>: inline-block;    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;    <span class="hljs-attribute">text-align</span>: right <span class="hljs-meta">!important</span>;&#125;</code></pre></div><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/01~%E6%A0%B7%E5%BC%8F%E5%BC%95%E5%85%A5.png" alt="01 样式引入"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pxxyyz.com/posts/30454/#typed.ejs">Typing+hitokoto+jinrishici - 卤蛋的自我修养 (pxxyyz.com)</a></li><li><a href="https://www.yousazoe.top/archives/e5b4d2d6.html">Hexo-Fluid 博客建站记录 | Fl0w3r (yousazoe.top)</a></li><li><a href="https://lzy-wi.github.io/2020/09/21/fluid-add-hitokoto/">fluid主题博客主页添加一言(hitokoto)手把手教学 - Lzywi’Blog (lzy-wi.github.io)</a></li><li><a href="https://developer.hitokoto.cn/">一言开发者中心</a> </li><li><a href="https://www.jinrishici.com/doc/">今日诗词开放接口</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客美化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一言</tag>
      
      <tag>今日诗词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中文技术文档写作规范</title>
    <link href="/posts/9113742/"/>
    <url>/posts/9113742/</url>
    
    <content type="html"><![CDATA[<p>本文链接： <a href="https://github.com/ruanyf/document-style-guide">ruanyf/document-style-guide: 中文技术文档的写作规范 (github.com)</a> 。</p><p>为方便阅读，对文章的排版做了修改。内容未做改动。</p><h1 id="第一章-标题"><a href="#第一章-标题" class="headerlink" title="第一章    标题"></a>第一章    标题</h1><h2 id="1-1-层级"><a href="#1-1-层级" class="headerlink" title="1.1 层级"></a>1.1 层级</h2><p>标题分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>下面是示例。</p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><span class="hljs-section">## 二级标题</span><span class="hljs-section">### 三级标题</span><span class="hljs-section">#### 四级标题</span></code></pre></div><h2 id="1-2-原则"><a href="#1-2-原则" class="headerlink" title="1.2 原则"></a>1.2 原则</h2><p>（1）一级标题下，不能直接出现三级标题。</p><p>示例：下面的文章结构，缺少二级标题。</p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><span class="hljs-section">### 三级标题</span></code></pre></div><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p><p>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section">## 二级标题 A</span><span class="hljs-section">### 三级标题 A</span><span class="hljs-section">## 二级标题 B</span></code></pre></div><p>（3）下级标题不重复上一级标题的名字。</p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section">## 概述</span><span class="hljs-section">### 概述</span></code></pre></div><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p>示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。</p><div class="code-wrapper"><pre><code class="hljs markdown">结构一<span class="hljs-section">### 三级标题</span><span class="hljs-section">#### 四级标题 A</span><span class="hljs-section">#### 四级标题 B</span><span class="hljs-section">#### 四级标题 C</span>结构二<span class="hljs-section">### 三级标题</span><span class="hljs-strong">**（1）A**</span><span class="hljs-strong">**（2）B**</span><span class="hljs-strong">**（3）C**</span></code></pre></div><h1 id="第二章-文本"><a href="#第二章-文本" class="headerlink" title="第二章    文本"></a>第二章    文本</h1><h2 id="2-1-字间距"><a href="#2-1-字间距" class="headerlink" title="2.1 字间距"></a>2.1 字间距</h2><p>（1）全角中文字符与半角英文字符之间，应有一个半角空格。</p><div class="code-wrapper"><pre><code class="hljs">错误：本文介绍如何快速启动Windows系统。正确：本文介绍如何快速启动 Windows 系统。</code></pre></div><p>（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><div class="code-wrapper"><pre><code class="hljs tap">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。正确：2011 年<span class="hljs-number"> 5 </span>月<span class="hljs-number"> 15 </span>日，我订购了<span class="hljs-number"> 5 </span>台笔记本电脑与<span class="hljs-number"> 10 </span>台平板电脑。</code></pre></div><p>半角的百分号，视同阿拉伯数字。</p><div class="code-wrapper"><pre><code class="hljs erlang-repl">正确：今年我国经济增长率是<span class="hljs-number">6.5</span><span class="hljs-comment">%。</span>正确：今年我国经济增长率是 <span class="hljs-number">6.5</span><span class="hljs-comment">%。</span></code></pre></div><p>（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙。</p><div class="code-wrapper"><pre><code class="hljs nix">例<span class="hljs-number">1</span>：一部容量为 <span class="hljs-number">16</span> GB 的智能手机例<span class="hljs-number">2</span>：<span class="hljs-number">1</span> <span class="hljs-attr">h</span> = <span class="hljs-number">60</span> <span class="hljs-attr">min</span> = <span class="hljs-number">3</span>,<span class="hljs-number">600</span> s</code></pre></div><p>（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><div class="code-wrapper"><pre><code class="hljs">错误：他的电脑是 MacBook Air 。正确：他的电脑是 MacBook Air。</code></pre></div><h2 id="2-2-句子"><a href="#2-2-句子" class="headerlink" title="2.2 句子"></a>2.2 句子</h2><p>（1）避免使用长句。</p><p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。</p><div class="code-wrapper"><pre><code class="hljs">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</code></pre></div><p>逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。</p><p>（2）尽量使用简单句和并列句，避免使用复合句。</p><div class="code-wrapper"><pre><code class="hljs">并列句：他昨天生病了，没有参加会议。复合句：那个昨天生病的人没有参加会议。</code></pre></div><p>（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><div class="code-wrapper"><pre><code class="hljs">错误：请确认没有接通装置的电源。正确：请确认装置的电源已关闭。</code></pre></div><p>（4）避免使用双重否定句。</p><div class="code-wrapper"><pre><code class="hljs">错误：没有删除权限的用户，不能删除此文件。正确：用户必须拥有删除权限，才能删除此文件。</code></pre></div><h2 id="2-3-写作风格"><a href="#2-3-写作风格" class="headerlink" title="2.3 写作风格"></a>2.3 写作风格</h2><p>（1）尽量不使用被动语态，改为使用主动语态。</p><div class="code-wrapper"><pre><code class="hljs">错误：假如此软件尚未被安装，正确：假如尚未安装这个软件，</code></pre></div><p>（2）不使用非正式的语言风格。</p><div class="code-wrapper"><pre><code class="hljs">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！正确：无法参加本次活动，我深感遗憾。</code></pre></div><p>（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p><div class="code-wrapper"><pre><code class="hljs">错误：这是唯二的快速启动的方法。正确：这是仅有的两种快速启动的方法。</code></pre></div><p>（4）用对“的”、“地”、“得”。</p><div class="code-wrapper"><pre><code class="hljs">她露出了开心的笑容。（形容词＋的＋名词）她开心地笑了。（副词＋地＋动词）她笑得很开心。（动词＋得＋副词）</code></pre></div><p>（5）使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p><div class="code-wrapper"><pre><code class="hljs">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</code></pre></div><p>（6）名词前不要使用过多的形容词。</p><div class="code-wrapper"><pre><code class="hljs">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</code></pre></div><h2 id="2-4-英文处理"><a href="#2-4-英文处理" class="headerlink" title="2.4 英文处理"></a>2.4 英文处理</h2><p>（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><div class="code-wrapper"><pre><code class="hljs ada">英文：⋯information stored <span class="hljs-keyword">in</span> random <span class="hljs-keyword">access</span> memory (RAMs)⋯中文：……存储在随机存取存储器（RAM）里的信息……</code></pre></div><p>（2）外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p><div class="code-wrapper"><pre><code class="hljs erlang">U.S.A.Apple, Inc.</code></pre></div><p>（3）表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）。</p><div class="code-wrapper"><pre><code class="hljs vim">英文：<span class="hljs-number">5</span> minutes <span class="hljs-keyword">later</span>⋯中文：<span class="hljs-number">5</span> 分钟过去了……</code></pre></div><p>（4）英文书名或电影名改用中文表达时，双引号应改为书名号。</p><div class="code-wrapper"><pre><code class="hljs stata">英文：<span class="hljs-keyword">He</span> published <span class="hljs-keyword">an</span> article entitled <span class="hljs-string">&quot;The Future of the Aviation&quot;</span>.中文：他发表了一篇名为《航空业的未来》的文章。</code></pre></div><p>（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><div class="code-wrapper"><pre><code class="hljs">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。</code></pre></div><p>（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><div class="code-wrapper"><pre><code class="hljs applescript">“American Association <span class="hljs-keyword">of</span> Physicists <span class="hljs-keyword">in</span> Medicine”（美国医学物理学家协会）是专有名词，需要大写。“online <span class="hljs-keyword">transaction</span> processing”（在线事务处理）不是专有名词，不应大写。</code></pre></div><h1 id="第三章-段落"><a href="#第三章-段落" class="headerlink" title="第三章    段落"></a>第三章    段落</h1><h2 id="3-1-原则"><a href="#3-1-原则" class="headerlink" title="3.1 原则"></a>3.1 原则</h2><ul><li>一个段落只能有一个主题，或一个中心句子。</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li><li>段落之间使用一个空行隔开。</li><li>段落开头不要留出空白字符。</li></ul><h2 id="3-2-引用"><a href="#3-2-引用" class="headerlink" title="3.2 引用"></a>3.2 引用</h2><p>引用第三方内容时，应注明出处。</p><div class="code-wrapper"><pre><code class="hljs inform7">One <span class="hljs-keyword">man</span>’s constant <span class="hljs-keyword">is</span> another <span class="hljs-keyword">man</span>’s variable. — Alan Perlis</code></pre></div><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><div class="code-wrapper"><pre><code class="hljs">本文转载自 WikiQuote</code></pre></div><p>使用外部图片时，必须在图片下方或文末标明来源。</p><div class="code-wrapper"><pre><code class="hljs">本文部分图片来自 Wikipedia</code></pre></div><h1 id="第四章-数值"><a href="#第四章-数值" class="headerlink" title="第四章    数值"></a>第四章    数值</h1><h2 id="4-1-半角数字"><a href="#4-1-半角数字" class="headerlink" title="4.1 半角数字"></a>4.1 半角数字</h2><p>阿拉伯数字一律使用半角形式，不得使用全角形式。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">错误：这件商品的价格是１０００元。</span><span class="hljs-string">正确：这件商品的价格是</span> <span class="hljs-number">1000</span> <span class="hljs-string">元。</span></code></pre></div><h2 id="4-2-千分号"><a href="#4-2-千分号" class="headerlink" title="4.2 千分号"></a>4.2 千分号</h2><p>数值为千位以上，应添加千分号（半角逗号）。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">XXX</span> 公司的实收资本为 ￥<span class="hljs-number">1</span>,<span class="hljs-number">258</span>,<span class="hljs-number">000</span> 人民币。</code></pre></div><p>对于 4 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于 4 位以上的数值，应添加千分号。</p><h2 id="4-3-货币"><a href="#4-3-货币" class="headerlink" title="4.3 货币"></a>4.3 货币</h2><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><div class="code-wrapper"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$1</span>,000</span><span class="hljs-number">1</span>,<span class="hljs-number">000</span> 美元</code></pre></div><p>英文的货币名称，建议参考国际标准 <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>。</p><h2 id="4-4-数值范围"><a href="#4-4-数值范围" class="headerlink" title="4.4 数值范围"></a>4.4 数值范围</h2><p>表示数值范围时，用波浪线（<code>～</code>）或一字线（<code>—</code>）连接。参见《标点符号》一节的“连接号”部分。</p><p>带有单位或百分号时，两个数字建议都要加上单位或百分号。</p><div class="code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">132 </span>kg～<span class="hljs-number">234</span> kg<span class="hljs-number">67</span>%～<span class="hljs-number">89</span>%</code></pre></div><h2 id="4-5-变化程度的表示法"><a href="#4-5-变化程度的表示法" class="headerlink" title="4.5 变化程度的表示法"></a>4.5 变化程度的表示法</h2><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p><div class="code-wrapper"><pre><code class="hljs">增加到过去的两倍（过去为一，现在为二）增加了两倍（过去为一，现在为三）</code></pre></div><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p><div class="code-wrapper"><pre><code class="hljs">降低到百分之八十（定额是一百，现在是八十）降低了百分之八十（原来是一百，现在是二十）</code></pre></div><p>不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h1 id="第五章-标点符号"><a href="#第五章-标点符号" class="headerlink" title="第五章    标点符号"></a>第五章    标点符号</h1><h2 id="5-1-原则"><a href="#5-1-原则" class="headerlink" title="5.1 原则"></a>5.1 原则</h2><p>（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致。</p><p>（2）如果整句为英文，则该句使用英文/半角标点。</p><p>（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</p><p>（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以。</p><h2 id="5-2-句号"><a href="#5-2-句号" class="headerlink" title="5.2 句号"></a>5.2 句号</h2><p>（1）中文语句的结尾处应该用全角句号（<code>。</code>）。</p><p>（2）句子末尾用括号加注时，句号应在括号之外。</p><div class="code-wrapper"><pre><code class="hljs tap">错误：关于文件的输出，请参照第 1.3 节（见第<span class="hljs-number"> 26 </span>页。）正确：关于文件的输出，请参照第 1.3 节（见第<span class="hljs-number"> 26 </span>页）。</code></pre></div><h2 id="5-3逗号"><a href="#5-3逗号" class="headerlink" title="5.3逗号"></a>5.3逗号</h2><p>（1）逗号（<code>，</code>）表示句子内部的一般性停顿。</p><p>（2）注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><h2 id="5-4-顿号"><a href="#5-4-顿号" class="headerlink" title="5.4 顿号"></a>5.4 顿号</h2><p>（1）句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p><div class="code-wrapper"><pre><code class="hljs">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</code></pre></div><p>（2）英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p><div class="code-wrapper"><pre><code class="hljs armasm">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook <span class="hljs-keyword">and</span> other components.</code></pre></div><p>（3）中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优。</p><div class="code-wrapper"><pre><code class="hljs">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</code></pre></div><h2 id="5-5-分号"><a href="#5-5-分号" class="headerlink" title="5.5 分号"></a>5.5 分号</h2><p>（1）分号（<code>；</code>）表示复句内部并列分句之间的停顿。</p><h2 id="5-6-引号"><a href="#5-6-引号" class="headerlink" title="5.6 引号"></a>5.6 引号</h2><p>（1）引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p><div class="code-wrapper"><pre><code class="hljs">例句：许多人都认为客户服务的核心是“友好”和“专业”。</code></pre></div><p>（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p><div class="code-wrapper"><pre><code class="hljs">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</code></pre></div><h2 id="5-7-括号"><a href="#5-7-括号" class="headerlink" title="5.7 括号"></a>5.7 括号</h2><p>（1）补充说明时，使用全角圆括号（<code>（）</code>），括号前后不加空格。</p><div class="code-wrapper"><pre><code class="hljs">例句：请确认所有的连接（电缆和接插件）均安装牢固。</code></pre></div><p>（2）几种括号的中英文名称。</p><table><thead><tr><th></th><th align="center">英文</th><th align="center">中文</th></tr></thead><tbody><tr><td><code>&#123; &#125;</code></td><td align="center">braces 或 curly brackets</td><td align="center">大括号</td></tr><tr><td><code>[ ]</code></td><td align="center">square brackets 或 brackets</td><td align="center">方括号</td></tr><tr><td><code>&lt; &gt;</code></td><td align="center">angled brackets</td><td align="center">尖括号</td></tr><tr><td><code>( )</code></td><td align="center">parentheses</td><td align="center">圆括号</td></tr></tbody></table><h2 id="5-8-冒号"><a href="#5-8-冒号" class="headerlink" title="5.8 冒号"></a>5.8 冒号</h2><p>（1）全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p><div class="code-wrapper"><pre><code class="hljs">例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。</code></pre></div><p>（2）表示时间时，应使用半角冒号（<code>:</code>）。</p><div class="code-wrapper"><pre><code class="hljs">例句：早上 8:00</code></pre></div><h2 id="5-9-省略号"><a href="#5-9-省略号" class="headerlink" title="5.9 省略号"></a>5.9 省略号</h2><p>（1）省略号（<code>……</code>）表示语句未完、或者语气的不连续。</p><p>（2）省略号占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p><p>（3）省略号不应与“等”这个词一起使用。</p><div class="code-wrapper"><pre><code class="hljs">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</code></pre></div><h2 id="5-10-感叹号"><a href="#5-10-感叹号" class="headerlink" title="5.10 感叹号"></a>5.10 感叹号</h2><p>（1）应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）。</p><p>（2）不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p><h2 id="5-11-破折号"><a href="#5-11-破折号" class="headerlink" title="5.11 破折号"></a>5.11 破折号</h2><p>（1）破折号<code>————</code>一般用于进一步解释。</p><p>（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p><div class="code-wrapper"><pre><code class="hljs">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。</code></pre></div><h2 id="5-12-连接号"><a href="#5-12-连接号" class="headerlink" title="5.12 连接号"></a>5.12 连接号</h2><p>（1）连接号用于连接两个类似的词。</p><p>（2）以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p><ul><li>两个名词的复合</li><li>图表编号</li></ul><div class="code-wrapper"><pre><code class="hljs subunit">例句：氧化-还原反应例句：图 1<span class="hljs-string">-1</span></code></pre></div><p>（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>）或一字号（<code>—</code>），占一个全角字符的位置。</p><div class="code-wrapper"><pre><code class="hljs">例句：2009 年～2011 年</code></pre></div><p>注意，波浪连接号前后两个值都建议加上单位。</p><p>（4）波浪连接号也可以用汉字“至”代替。</p><div class="code-wrapper"><pre><code class="hljs mathematica">例句：周围温度：<span class="hljs-operator">-</span><span class="hljs-number">20</span> °<span class="hljs-built_in">C</span> 至 <span class="hljs-operator">-</span><span class="hljs-number">10</span> °<span class="hljs-built_in">C</span></code></pre></div><h1 id="第六章-文档体系"><a href="#第六章-文档体系" class="headerlink" title="第六章    文档体系"></a>第六章    文档体系</h1><h2 id="6-1-结构"><a href="#6-1-结构" class="headerlink" title="6.1 结构"></a>6.1 结构</h2><p>软件手册是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li><li><strong>入门篇</strong>（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li><li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li></ul></li><li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</li><li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li><li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li><li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>Glossary</strong>：[可选] [文件] 名词解释</li><li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li><li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li><li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li><li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li></ul></li></ul><p>下面是两个真实范例，可参考。</p><ul><li><a href="https://redux.js.org/introduction/getting-started">Redux 手册</a></li><li><a href="http://flight-manual.atom.io/">Atom 手册</a></li></ul><h2 id="6-2-文件名"><a href="#6-2-文件名" class="headerlink" title="6.2 文件名"></a>6.2 文件名</h2><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><div class="code-wrapper"><pre><code class="hljs dos">错误：名词解释.<span class="hljs-built_in">md</span>正确：glossary.<span class="hljs-built_in">md</span></code></pre></div><p>文件名建议只使用小写字母，不使用大写字母。</p><div class="code-wrapper"><pre><code class="hljs dos">错误：TroubleShooting.<span class="hljs-built_in">md</span>正确：troubleshooting.<span class="hljs-built_in">md</span></code></pre></div><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><div class="code-wrapper"><pre><code class="hljs dos">不佳：advanced_usage.<span class="hljs-built_in">md</span>正确：advanced-usage.<span class="hljs-built_in">md</span></code></pre></div><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html">产品手册中文写作规范</a>, by 华为</li><li><a href="http://guide.daocloud.io/dcs/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%E5%92%8C%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83-9153803.html">写作规范和格式规范</a>, by DaoCloud</li><li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li><li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf">简体中文规范指南</a>, by lengoo</li><li><a href="https://open.leancloud.cn/copywriting-style-guide.html">文档风格指南</a>, by LeanCloud</li><li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit">豌豆荚文案风格指南</a>, by 豌豆荚</li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a>, by sparanoid</li><li><a href="http://w3c.github.io/clreq/">中文排版需求</a>, by W3C</li><li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html">为什么文件名要小写？</a>, by 阮一峰</li><li><a href="https://developers.google.com/style/">Google Developer Documentation Style Guide</a>, by Google</li><li><a href="http://www.moe.gov.cn/ewebeditor/uploadfile/2015/01/13/20150113091154536.pdf">出版物上数字用法的规定（国家标准GBT15835－2011）</a></li><li><a href="https://zh.wikisource.org/zh-hans/GB_3100-1993_%E5%9B%BD%E9%99%85%E5%8D%95%E4%BD%8D%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8">GB 3100-1993 国际单位制及其应用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/posts/d87f7e0c/"/>
    <url>/posts/d87f7e0c/</url>
    
    <content type="html"><![CDATA[<p><strong>你好，世界！</strong></p><p><strong>这是一个测试文档。</strong></p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>仰天长啸出门去，我辈岂是蓬蒿人。维尔体育</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>仰天长啸出门去，我辈岂是蓬蒿人。</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>仰天长啸出门去，我辈岂是蓬蒿人。</p><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>仰天长啸出门去，我辈岂是蓬蒿人。</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>仰天长啸出门去，我辈岂是蓬蒿人。</p><h2 id="《将进酒》"><a href="#《将进酒》" class="headerlink" title="《将进酒》"></a>《将进酒》</h2><h3 id="《蜀道难》"><a href="#《蜀道难》" class="headerlink" title="《蜀道难》"></a>《蜀道难》</h3><h4 id="《梦游天姥吟留别》"><a href="#《梦游天姥吟留别》" class="headerlink" title="《梦游天姥吟留别》"></a>《梦游天姥吟留别》</h4><h5 id="《望庐山瀑布》"><a href="#《望庐山瀑布》" class="headerlink" title="《望庐山瀑布》"></a>《望庐山瀑布》</h5><h6 id="《侠客行》"><a href="#《侠客行》" class="headerlink" title="《侠客行》"></a>《侠客行》</h6><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><p>海<strong>客谈瀛</strong>洲，<u>烟涛微</u>茫信难求，<em>越人语</em>天姥，<del>云霞明</del>灭或可睹。天==姥连==天向天横，<code>势拔五岳</code>掩赤城。天台一万八千丈，对此欲倒东南倾。</p><p>我欲因之梦吴越，一夜飞渡镜湖月。湖月照我影，送我至剡溪。谢公宿外今尚在，渌水荡漾清猿啼。脚著谢公屐，身登青云梯。半壁见海日，空中闻天鸡。千岩万转路不定，迷花倚石忽已暝。熊咆龙吟殷岩泉，栗深林兮惊层巅。云青青兮欲雨，水澹澹兮生烟。列缺霹雳，丘峦崩摧，洞天石扉，訇然中开。青冥浩荡不见底，日月照耀金银台。霓为衣兮风为马，云之君兮纷纷而来下。虎鼓瑟兮鸾回车，仙之人兮列如麻。忽魂悸以魄动，怳惊起而长嗟。惟觉时之枕席，失向来之烟霞。</p><p>世间行乐亦如此，古来万事东流水。别君去兮何时还？且放白鹿青崖间，须行即骑访名山。安能摧眉折腰事权贵，使我不得开心颜！</p><h2 id="思源笔记"><a href="#思源笔记" class="headerlink" title="思源笔记"></a><a href="https://b3log.org/siyuan/">思源笔记</a></h2><p>abcdefghijklmnopqrstuvwxyz        ABCDEFGHIJKLMNOPQRSTUVWXYZ        1234567890</p><p>1、加粗：<strong>镜湖月</strong>        <strong>jinghu-moon</strong>        <strong>1234567890</strong></p><p>2、斜体：<em>镜湖月</em>        <em>jinghu-moon</em>        <em>1234567890</em></p><p>3、高亮：==镜湖月==        ==jinghu-moon==</p><p>4、删除线：~~~镜湖月~~</p><p>5、行内代码：<code>abcdefghijklmnopqrstuvwxyz</code>        <code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></p><p>6、行间代码：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello，jinghu-moon！\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">// 这是一个测试文档！</span></code></pre></div><p>7、下划线：<u>镜湖月</u></p><p>8、链接：<a href="https://b3log.org/siyuan/">思源笔记 - 本地优先的个人知识管理系统，支持 Markdown 排版、块级引用和双向链接</a></p><p>9、表格：</p><table><thead><tr><th>镜湖月</th><th>镜湖月</th><th>镜湖月</th></tr></thead><tbody><tr><td>镜湖月</td><td>镜湖月</td><td>镜湖月</td></tr><tr><td>镜湖月</td><td>镜湖月</td><td>镜湖月</td></tr><tr><td>镜湖月</td><td>镜湖月</td><td>镜湖月</td></tr><tr><td><a href="https://b3log.org/siyuan/">思源笔记</a></td><td></td><td></td></tr></tbody></table><p>10、列表</p><ol><li>哈哈哈</li><li>哈哈哈<ol><li>哈哈哈<ol><li>哈哈哈</li></ol></li></ol></li><li>哈哈哈</li></ol><ul><li>哈哈哈</li><li>哈哈哈<ul><li>哈哈哈<ul><li>哈哈哈<ul><li>哈哈哈</li></ul></li></ul></li></ul></li></ul><p>11、引用</p><blockquote><p>仰天长啸出门去，我辈岂是蓬蒿人。</p></blockquote><p>12、图像</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/splash.png" alt="splash"></p><p>13、脚注</p><p>使用 [^keyword] 表示注脚。</p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/image-20220104152952400.png"></p><p>[^keyword]: 这是脚注  <a href="https://b3log.org/siyuan/">思源笔记 - 本地优先的个人知识管理系统，支持 Markdown 排版、块级引用和双向链接 </a></p>]]></content>
    
    
    <categories>
      
      <category>A1</category>
      
      <category>A2</category>
      
      <category>a1</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图片测试</title>
    <link href="/posts/b211d196/"/>
    <url>/posts/b211d196/</url>
    
    <content type="html"><![CDATA[<h2 id="1、ImgURL免费图床"><a href="#1、ImgURL免费图床" class="headerlink" title="1、ImgURL免费图床"></a>1、<a href="https://imgurl.org/">ImgURL免费图床</a></h2><p><img src="https://s3.bmp.ovh/imgs/2021/12/2f8905f2f32955e9.jpg" alt="123"></p><h2 id="2、老王图床"><a href="#2、老王图床" class="headerlink" title="2、老王图床"></a>2、<a href="https://img.gejiba.com/">老王图床</a></h2><p><img src="https://img.gejiba.com/images/d2ac6309f552d457ee49619e204d03e0.jpg" alt="d2ac6309f552d457ee49619e204d03e0.jpg"></p><h2 id="3、荟聚图床-不在更改"><a href="#3、荟聚图床-不在更改" class="headerlink" title="3、荟聚图床 - 不在更改"></a>3、<a href="https://www.imgurl.uk/">荟聚图床 - 不在更改</a></h2><p><img src="https://www.imgurl.uk/images/2021/12/04/1.jpg" alt="1.jpg"></p><h2 id="3、微博图床"><a href="#3、微博图床" class="headerlink" title="3、微博图床"></a>3、微博图床</h2><p><a href="https://github.com/Suxiaogang/WeiboPicBed">suxiaogang/WeiboPicBed: 新浪微博图床 Chrome扩展 (github.com)</a></p><p><img src="http://tva1.sinaimg.cn/large/006ToJRUgy1gx1mzuxjk6j31z4140b29.jpg" alt="1.jpg"></p><h2 id="4、gitee"><a href="#4、gitee" class="headerlink" title="4、gitee"></a>4、gitee</h2><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/%E6%A0%87%E7%AD%BE.jpg"></p><h2 id="5、GitHub"><a href="#5、GitHub" class="headerlink" title="5、GitHub"></a>5、GitHub</h2><p><img src="https://raw.githubusercontent.com/jinghu-moon/hexo-bed/main/image/splash.png"></p><p><code>是是是</code></p><p><a href="README.md">Chinese Simplified</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/4a17b156/"/>
    <url>/posts/4a17b156/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://gitee.com/jinghu-moon/imgbed/raw/master/images/1.1%20node.js%E4%B8%8B%E8%BD%BD%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89.png" alt="1.1 node.js下载（官网）"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
